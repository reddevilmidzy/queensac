name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  SQLX_OFFLINE: true

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache cargo binaries
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-bin-

      - name: Run cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          log-level: warn
          manifest-path: ./rook/Cargo.toml
          command: check
          arguments: --all-features

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: rook/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('rook/Cargo.lock') }}

      - name: Check formatting
        working-directory: rook
        run: cargo fmt -- --check

      - name: Lint with Clippy
        working-directory: rook
        run: cargo clippy -- -D warnings

  build:
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: rook/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('rook/Cargo.lock') }}

      - name: Build
        working-directory: rook
        run: cargo build --verbose

  test:
    needs: build
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: rook/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('rook/Cargo.lock') }}

      - name: Run tests
        working-directory: rook
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
        run: cargo test --verbose

  coverage:
    needs: test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: rook/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('rook/Cargo.lock') }}
      
      - name: Cache cargo-tarpaulin binary
        id: cache-tarpaulin
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-tarpaulin
          key: ${{ runner.os }}-cargo-tarpaulin-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-tarpaulin
        if: steps.cache-tarpaulin.outputs.cache-hit != 'true'
        run: cargo install cargo-tarpaulin
      
      - name: Generate coverage report
        working-directory: rook
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
        run: cargo tarpaulin --out xml --output-dir coverage
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: rook/coverage/cobertura.xml
          verbose: true
          fail_ci_if_error: false
