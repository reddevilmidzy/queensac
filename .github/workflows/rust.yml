name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: |
          cargo fmt -- --check > fmt-log.txt 2>&1
          FMT_STATUS=$?
          cat fmt-log.txt
          exit $FMT_STATUS

      - name: Lint with Clippy
        run: |
          cargo clippy -- -D warnings > clippy-log.txt 2>&1
          CLIPPY_STATUS=$?
          cat clippy-log.txt
          exit $CLIPPY_STATUS

      - name: Build
        run: |
          cargo build --verbose > build-log.txt 2>&1
          BUILD_STATUS=$?
          cat build-log.txt
          exit $BUILD_STATUS

      - name: Run tests
        run: |
          cargo test --verbose > test-log.txt 2>&1
          TEST_STATUS=$?
          cat test-log.txt
          exit $TEST_STATUS

      - name: Capture failure reason
        if: failure()
        run: |
          echo "=== Formatting Log ===" > full-log.txt
          [ -f fmt-log.txt ] && cat fmt-log.txt >> full-log.txt || echo "No formatting log available" >> full-log.txt
          
          echo -e "\n=== Clippy Log ===" >> full-log.txt
          [ -f clippy-log.txt ] && cat clippy-log.txt >> full-log.txt || echo "No clippy log available" >> full-log.txt
          
          echo -e "\n=== Build Log ===" >> full-log.txt
          [ -f build-log.txt ] && cat build-log.txt >> full-log.txt || echo "No build log available" >> full-log.txt
          
          echo -e "\n=== Test Log ===" >> full-log.txt
          [ -f test-log.txt ] && cat test-log.txt >> full-log.txt || echo "No test log available" >> full-log.txt
          
          tail -n 20 full-log.txt > summary.txt

      - name: Upload failure summary
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-summary
          path: summary.txt

  notify-on-failure:

    needs: build
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'pull_request'

    steps:
      - name: Download failure summary
        uses: actions/download-artifact@v4
        with:
          name: failure-summary
          path: .

      - name: Read failure summary
        id: read_summary
        run: |
          SUMMARY=$(tail -n 20 summary.txt)
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post failure comment
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const summary = `${{ steps.read_summary.outputs.summary }}`.substring(0, 500);

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: [
                '**?? Blunder** üòµ‚Äçüí´',
                'Your CI made a critical mistake on the board.',
                '',
                `‚ùå **Reason (excerpt):**`,
                '',
                summary,
                '',
                `See the battle logs here: [View Logs](${runUrl})`,
                '',
                '_Time to rethink your next move!_'
              ].join('\n')
            });
