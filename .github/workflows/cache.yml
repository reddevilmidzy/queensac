# Rust Cache Workflow
#
# This file documents the centralized caching strategy for Rust builds.
# Instead of duplicating cache configuration across jobs, we use the
# industry-standard Swatinem/rust-cache action which automatically handles:
# - ~/.cargo/registry
# - ~/.cargo/git  
# - target directory
# - Cargo binaries (when needed)
#
# Usage in jobs:
#   - uses: Swatinem/rust-cache@v2
#
# This action is smart enough to:
# - Cache based on Cargo.lock and rust-toolchain
# - Share caches across jobs
# - Clean up old cache entries
# - Handle incremental builds efficiently
#
# For custom cache needs, you can configure:
#   - uses: Swatinem/rust-cache@v2
#     with:
#       # Cache key prefix
#       prefix-key: "v1"
#       # Additional cache paths
#       cache-directories: |
#         ~/.cargo/bin
#       # Share cache across jobs  
#       shared-key: "rust-cache"

name: Rust Cache Reference

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  reference:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      # Standard Rust cache setup - replaces manual cache configuration
      - uses: Swatinem/rust-cache@v2
        with:
          # Shared cache key for all Rust jobs
          shared-key: "rust-build"
          # Cache cargo binaries directory
          cache-directories: |
            ~/.cargo/bin
